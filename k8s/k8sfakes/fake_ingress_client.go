// Code generated by counterfeiter. DO NOT EDIT.
package k8sfakes

import (
	"sync"

	"github.com/julz/cube/k8s"
	ext "k8s.io/api/extensions/v1beta1"
	av1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type FakeIngressClient struct {
	GetStub        func(namespace, name string, options av1.GetOptions) (*ext.Ingress, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		namespace string
		name      string
		options   av1.GetOptions
	}
	getReturns struct {
		result1 *ext.Ingress
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *ext.Ingress
		result2 error
	}
	UpdateStub        func(namespace string, rule *ext.Ingress) (*ext.Ingress, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		namespace string
		rule      *ext.Ingress
	}
	updateReturns struct {
		result1 *ext.Ingress
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *ext.Ingress
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeIngressClient) Get(namespace string, name string, options av1.GetOptions) (*ext.Ingress, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		namespace string
		name      string
		options   av1.GetOptions
	}{namespace, name, options})
	fake.recordInvocation("Get", []interface{}{namespace, name, options})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(namespace, name, options)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeIngressClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeIngressClient) GetArgsForCall(i int) (string, string, av1.GetOptions) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].namespace, fake.getArgsForCall[i].name, fake.getArgsForCall[i].options
}

func (fake *FakeIngressClient) GetReturns(result1 *ext.Ingress, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *ext.Ingress
		result2 error
	}{result1, result2}
}

func (fake *FakeIngressClient) GetReturnsOnCall(i int, result1 *ext.Ingress, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *ext.Ingress
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *ext.Ingress
		result2 error
	}{result1, result2}
}

func (fake *FakeIngressClient) Update(namespace string, rule *ext.Ingress) (*ext.Ingress, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		namespace string
		rule      *ext.Ingress
	}{namespace, rule})
	fake.recordInvocation("Update", []interface{}{namespace, rule})
	fake.updateMutex.Unlock()
	if fake.UpdateStub != nil {
		return fake.UpdateStub(namespace, rule)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.updateReturns.result1, fake.updateReturns.result2
}

func (fake *FakeIngressClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeIngressClient) UpdateArgsForCall(i int) (string, *ext.Ingress) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return fake.updateArgsForCall[i].namespace, fake.updateArgsForCall[i].rule
}

func (fake *FakeIngressClient) UpdateReturns(result1 *ext.Ingress, result2 error) {
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *ext.Ingress
		result2 error
	}{result1, result2}
}

func (fake *FakeIngressClient) UpdateReturnsOnCall(i int, result1 *ext.Ingress, result2 error) {
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *ext.Ingress
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *ext.Ingress
		result2 error
	}{result1, result2}
}

func (fake *FakeIngressClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeIngressClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ k8s.IngressClient = new(FakeIngressClient)
